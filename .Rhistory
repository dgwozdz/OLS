matrix.string
separate.strings <- unlist(combs[j])
matrix.string <- rbind(sapply(separate.strings, paste0, ".", 1:max.lag),
separate.strings)
matrix.string
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
combs.lags <- c()
for(j in 790:length(combs)){
# expand.grid(matrix(unlist(strsplit(combs[j], " ")),
#                    ncol = length(unlist(strsplit(combs[j], " ")))))
# separate.strings <-
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.iter <- apply(matrix.comb, 1, paste0, collapse = " ")
combs.lags<- append(combs.lags, combs.iter)
print(j)
}
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
combs.lags <- c()
for(j in 790:length(combs)){
# expand.grid(matrix(unlist(strsplit(combs[j], " ")),
#                    ncol = length(unlist(strsplit(combs[j], " ")))))
# separate.strings <-
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
print(j)
}
sapply(unlist(combs[j]), paste0, ".", 1:max.lag)
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
j
rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
matrix.comb
combs.lags
combs.lags
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
combs.lags <- matrix(NULL)
combs.lags
matrix()
matrix(c())
as.matrix(c())
combs.lags <- matrix(, nrow = 0, ncol = 0)
combs.lags
combs.lags <- matrix(, nrow = 0, ncol = 0)
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
combs.lags<- rbindlist(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
library(data.table)
combs.lags<- rbindlist(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
combs.lags<- rbindlist(list(combs.lags, apply(matrix.comb, 1, paste0, collapse = " ")))
combs.lags
apply(matrix.comb, 1, paste0, collapse = " ")
class(apply(matrix.comb, 1, paste0, collapse = " "))
combs.lags
combs.lags<- rbindlist(list(combs.lags, apply(matrix.comb, 1, paste0, collapse = " ")))
class(combs.lags)
combs.lags <- matrix(, nrow = 0, ncol = 0)
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(list(combs.lags, apply(matrix.comb, 1, paste0, collapse = " ")))
combs.lags
matrix(apply(matrix.comb, 1, paste0, collapse = " "))
0
rbindlist(list(combs.lags, matrix(apply(matrix.comb, 1, paste0, collapse = " ")))
rbindlist(list(combs.lags, matrix(apply(matrix.comb, 1, paste0, collapse = " "))))
combs.lags <- list
combs.lags
combs.lags <- list()
rbindlist(list(combs.lags, matrix(apply(matrix.comb, 1, paste0, collapse = " "))))
list(apply(matrix.comb, 1, paste0, collapse = " ")))
list(apply(matrix.comb, 1, paste0, collapse = " "))
rbindlist(list(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " "))))
library(data.table)
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(list(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " "))))
print(j)
}
rbindlist(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")))
library(data.table)
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F)
print(j)
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F, fill = F)
print(j)
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F, fill = F, idcol = 1)
print(j)
}
list(apply(matrix.comb, 1, paste0, collapse = " "))
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- c(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")))#,
# use.names=F, fill = F, idcol = 1)
print(j)
}
library(data.table)
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- c(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")))#,
# use.names=F, fill = F, idcol = 1)
print(j)
}
library(data.table)
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(list(combs.lags), list(apply(matrix.comb, 1, paste0, collapse = " ")))#,
# use.names=F, fill = F, idcol = 1)
print(j)
}
list(apply(matrix.comb, 1, paste0, collapse = " "))
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(list(a = combs.lags), list(apply(a = matrix.comb, 1, paste0, collapse = " ")))#,
# use.names=F, fill = F, idcol = 1)
print(j)
}
list(a = combs.lags)
list(apply(a = matrix.comb, 1, paste0, collapse = " "))
rbindlist
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(list(combs.lags), list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F)#,
# use.names=F, fill = F, idcol = 1)
print(j)
}
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- rbindlist(list(combs.lags), list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F)#,
combs.lags<- c(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F)#,
combs.lags
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- c(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F)#,
# use.names=F, fill = F, idcol = 1)
print(j)
}
library(data.table)
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- list()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- list(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F)#,
# use.names=F, fill = F, idcol = 1)
print(j)
}
combs.lags<- list(combs.lags, list(apply(matrix.comb, 1, paste0, collapse = " ")),
use.names=F)#,
class(combs.lags)
str(combs.lags)
library(data.table)
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- c()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- c(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
# use.names=F, fill = F, idcol = 1)
print(j)
}
length(apply(matrix.comb, 1, paste0, collapse = " "))
a <- 1
b <- 1:3
a[2:4] <- b
a
a <- 1
b <- 1:3
a[length(a)+1:length(a)+length(b)] <- b
length(a)+length(b)
a <- 1
b <- 1:3
a
b
a[length(a)+1:length(a)+length(b)] <- b
length(a)+length(b)
a <- 1
b <- 1:3
length(a)+length(b)
length(a)+1
length(a)+1:length(a)+length(b)
(length(a)+1):(length(a)+length(b))
a <- 1
b <- 1:3
a[(length(a)+1):(length(a)+length(b))] <- b
library(data.table)
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs, combn(vec, i, simplify = F))
}
max.lag <- 4
# combs.lags <- c()
combs.lags <- c()
for(j in 790:length(combs)){
matrix.string <- rbind(sapply(unlist(combs[j]), paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags[(length(combs.lags)+1):(length(combs.lags)+length(apply(matrix.comb, 1, paste0, collapse = " ")))]<-
c(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
# use.names=F, fill = F, idcol = 1)
print(j)
}
length(combs.lags)
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
n <- 7
m <- 1
combs <- c()
for(i in m:n){
combs <-c(combs,
sapply(combn(vec, i, simplify = F), paste0, collapse = " "))
}
max.lag <- 4
combs.lags <- c()
system.time(
for(j in 790:length(combs)){
# expand.grid(matrix(unlist(strsplit(combs[j], " ")),
#                    ncol = length(unlist(strsplit(combs[j], " ")))))
separate.strings <- unlist(strsplit(combs[j], " "))
matrix.string <- rbind(sapply(separate.strings, paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.iter <- apply(matrix.comb, 1, paste0, collapse = " ")
combs.lags<- append(combs.lags, combs.iter)
print(j)
}
)
max.lag <- 4
combs.lags <- c()
system.time(
for(j in 790:length(combs)){
# expand.grid(matrix(unlist(strsplit(combs[j], " ")),
#                    ncol = length(unlist(strsplit(combs[j], " ")))))
separate.strings <- unlist(strsplit(combs[j], " "))
matrix.string <- rbind(sapply(separate.strings, paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
print(j)
}
)
ncomb <- function(vec, m = 1, n, max.lag){
vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
max.lag <- 4
n <- 7
m <- 1
if(n>length(vec)){stop(paste0("Number of combinations is greater than the number of the elements in the declared vector."))}
combs <- c()
for(i in m:n){
combs <-c(combs,
sapply(combn(vec, i, simplify = F), paste0, collapse = " "))
}
combs.lags <- c()
for(j in 1:length(combs)){
separate.strings <- unlist(strsplit(combs[j], " "))
matrix.string <- rbind(sapply(separate.strings, paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
}
return(combs.lags)
}
ncomb(vec = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'),
m = 1,
n = 9,
max.lag = 2)
ncomb(vec = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'),
m = 1,
n = 100,
max.lag = 2)
ncomb <- function(vec, m = 1, n, max.lag){
# vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
# max.lag <- 4
# n <- 7
# m <- 1
# if(n>length(vec)){stop(paste0("Number of combinations is greater than the number of the elements in the declared vector."))}
try(if(n>length(vec)) stop("Number of combinations is greater than the number of the elements in the declared vector."))
combs <- c()
for(i in m:n){
combs <-c(combs,
sapply(combn(vec, i, simplify = F), paste0, collapse = " "))
}
combs.lags <- c()
for(j in 1:length(combs)){
separate.strings <- unlist(strsplit(combs[j], " "))
matrix.string <- rbind(sapply(separate.strings, paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
}
return(combs.lags)
}
ncomb(vec = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'),
m = 1,
n = 100,
max.lag = 2)
ncomb <- function(vec, m = 1, n, max.lag){
# vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
# max.lag <- 4
# n <- 7
# m <- 1
try(if(n>length(vec)) stop("Number of combinations is greater than the number of the elements in the declared vector."))
combs <- c()
for(i in m:n){
combs <-c(combs,
sapply(combn(vec, i, simplify = F), paste0, collapse = " "))
}
combs.lags <- c()
for(j in 1:length(combs)){
separate.strings <- unlist(strsplit(combs[j], " "))
matrix.string <- rbind(sapply(separate.strings, paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
}
return(combs.lags)
}
ncomb(vec = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'),
m = 1,
n = 100,
max.lag = 2)
ncomb <- function(vec, m = 1, n, max.lag){
# vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
# max.lag <- 4
# n <- 7
# m <- 1
try(if(n>length(vec)) stop("Number of combinations is greater than the number of the elements in the declared vector."))
combs <- c()
for(i in m:n){
combs <-c(combs,
sapply(combn(vec, i, simplify = F), paste0, collapse = " "))
}
combs.lags <- c()
for(j in 1:length(combs)){
separate.strings <- unlist(strsplit(combs[j], " "))
matrix.string <- rbind(sapply(separate.strings, paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
}
return(combs.lags)
}
ncomb(vec = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'),
m = 1,
n = 4,
max.lag = 2)
ncomb <- function(vec, m = 1, n, max.lag){
# vec <- c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j')
# max.lag <- 4
# n <- 7
# m <- 1
try(if(n>length(vec)) stop("Number of combinations is greater than the number of the elements in the declared vector."))
combs <- c()
for(i in m:n){
combs <-c(combs,
sapply(combn(vec, i, simplify = F), paste0, collapse = " "))
}
combs.lags <- c()
for(j in 1:length(combs)){
separate.strings <- unlist(strsplit(combs[j], " "))
matrix.string <- rbind(sapply(separate.strings, paste0, ".", 1:max.lag),
separate.strings)
matrix.comb <- expand.grid(lapply(seq_len(ncol(matrix.string)), function(i) matrix.string[,i]))
combs.lags<- append(combs.lags, apply(matrix.comb, 1, paste0, collapse = " "))
}
return(combs.lags)
}
combs <- ncomb(vec = c('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'),
m = 1,
n = 4,
max.lag = 2)
length(combs)
source("ols_summary.r")
setwd('F:/Damian/github/ols/OLS')
source("ols_summary.r")
library(shiny)
source("ols.r")
